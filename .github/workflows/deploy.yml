# Nome do seu workflow
name: CI/CD do Frontend NODE com Docker

# Gatilho: Executar sempre que a branch 'main' for atualizada
on:
  push:
    branches: [ main ]

# Tarefas a serem executadas
jobs:
  # Tarefa 1: Construir e Enviar a Imagem Docker
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Construir e enviar a imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/yt:latest

  # Tarefa 2: Fazer o Deploy da nova imagem na VPS
  deploy:
    # Esta tarefa só corre se a anterior for bem-sucedida
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Executar comandos de Deploy na VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Puxar a imagem mais recente do Docker Hub
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/yt:latest
            
            # Parar e remover o contentor antigo (o '|| true' evita erros se o contentor não existir)
            docker stop yt-container || true
            docker rm yt-container || true
            
            # Executar o novo contentor a partir da imagem nova
            docker run -d -p 9090:3001 --name yt-container ${{ secrets.DOCKERHUB_USERNAME }}/yt:latest